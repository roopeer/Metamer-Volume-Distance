# -*- coding: utf-8 -*-
"""main

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n1DzG0nLfasKtqq-k2c33XysUWcWCkpm
"""

import colour
import numpy as np
import argparse
from scipy.spatial import ConvexHull
from sklearn.linear_model import LinearRegression
from utils import RootPolynomialFeatures
from mmb import compute_mmb
from plotting import plot_convex_hulls
from ocs import compute_ocs
from dist import dist
from sklearn.preprocessing import PolynomialFeatures

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='Evaluate the quality of the predicted image.')
    parser.add_argument(
                        'xyz_obs',
                        type=str,
                        help='cie_1964_10 or cie_2012_2 or cie_2012_10')
    parser.add_argument(
                        'camera_obs',
                        type=str,
                        help='nikon_5100')
    parser.add_argument(
                        'illum_1',
                        type=str,
                        help='any plausible value, e.g. D65')
    parser.add_argument(
                        'illum_2',
                        type=str,
                        help='any plausible value, e.g. A')
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_args()
    standard_visible_range = colour.SpectralShape(400, 700, 10)
    XYZ_ARG = args.xyz_obs
    if XYZ_ARG == 'cie_1964_10':
        XYZ_ARG = 'CIE 1964 10 Degree Standard Observer'
    if XYZ_ARG == 'cie_2012_2':
        XYZ_ARG = 'CIE 2012 2 Degree Standard Observer'
    if XYZ_ARG == 'cie_2012_10':
        XYZ_ARG = 'CIE 2012 10 Degree Standard Observer'
    CAMERA_ARG = args.camera_obs
    ILLUM_1 = args.illum_1
    ILLUM_2 = args.illum_2

    xyz_obs = colour.MSDS_CMFS['CIE 1964 10 Degree Standard Observer'].interpolate(standard_visible_range).values #colour.MSDS_CMFS[XYZ_ARG].interpolate(standard_visible_range).values
    nikon_obs = colour.MSDS_CAMERA_SENSITIVITIES['Nikon 5100 (NPL)'].interpolate(standard_visible_range).values
    illum_1 = colour.SDS_ILLUMINANTS[ILLUM_1].interpolate(standard_visible_range).values
    illum_2 = colour.SDS_ILLUMINANTS[ILLUM_2].interpolate(standard_visible_range).values
    gs_refl = [0.5] * 31
    z0 = xyz_obs.T @ (illum_1 * gs_refl)
    z_0 = nikon_obs.T @ (illum_2 * gs_refl)
    root_transform = RootPolynomialFeatures(4)
    root_z0 = root_transform.fit_transform(z0.reshape(-1, 1))
    #poly_transform = PolynomialFeatures(4)
    #poly_z0 = poly_transform.fit_transform(z0.reshape(-1, 1))
    linreg = LinearRegression().fit(root_z0, z_0)
    predicted = linreg.predict(root_z0)

    mmb_points = compute_mmb(ocs_Phi=z0, obs_resp_Phi=xyz_obs.T * illum_1, obs_resp_Psi=nikon_obs.T * illum_2, illum_Phi=illum_1, illum_Psi=illum_2)
    mmb_convex_hull = ConvexHull(mmb_points)

    ocs_points = compute_ocs(obs_resp=xyz_obs, illum=illum_1)
    ocs_convex_hull = ConvexHull(ocs_points)
    mmb_dist = dist(mmb_convex_hull, predicted.reshape(1, -1))
    print(mmb_dist[0])

    plot_convex_hulls([ocs_convex_hull, mmb_convex_hull], [predicted], "mmb_plot.html")
